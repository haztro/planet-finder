[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://assets/art/earth_clouds.jpg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeExpression" id=3]
size = Vector2( 436, 310 )
expression = "alpha = rgb.r;"

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out2p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Expression:4
	float n_out4p0;
	n_out4p0 = 0.0;
	{
		n_out4p0 = n_out3p0.r;
	}

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -6, 41 )
nodes/fragment/0/position = Vector2( 980, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 0, 100 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 160, 80 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 400, 80 )
nodes/fragment/4/size = Vector2( 436, 310 )
nodes/fragment/4/input_ports = "0,1,rgb;"
nodes/fragment/4/output_ports = "0,0,alpha;"
nodes/fragment/4/expression = "alpha = rgb.r;"
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 0, 1, 3, 0, 4, 0 )

[resource]
shader = SubResource( 4 )
